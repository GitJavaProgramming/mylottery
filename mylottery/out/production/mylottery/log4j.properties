log4j.rootLogger=debug, STDOUT
# ERROR 为严重错误 主要是程序的错误
# WARN 为一般警告，比如session丢失
# INFO 为一般要显示的信息，比如登录登出
# DEBUG 为程序的调试信息

# 记录器
log4j.logger.org.pp=STDOUT

# 输出源配置，控制台输出
log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout
# %t: 输出产生该日志事件的线程名
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL
# %F: 输出日志消息产生时所在的文件名称
# %L: 输出代码中的行号
# %m: 输出代码中指定的消息,产生的日志具体信息
# %n: 输出一个回车换行符，Windows平台为"\r\n"，Unix平台为"\n"输出日志信息换行
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式
# %r: 输出自应用启动到输出该log信息耗费的毫秒数
# %c: 输出所属的类目，通常就是所在类的全名
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。
log4j.appender.STDOUT.layout.ConversionPattern=%d{HH:mm:ss} [%t] %p (%F:%L) -| %m%n

# 输出源配置，输出到日志文件
#log4j.appender.FILEOUT=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.FILEOUT.File = logs/log.log
#log4j.appender.FILEOUT.Append = true
## 输出DEBUG级别以上的日志
#log4j.appender.FILEOUT.Threshold = DEBUG
#log4j.appender.FILEOUT.layout=org.apache.log4j.PatternLayout
#log4j.appender.FILEOUT.layout.ConversionPattern=%d{HH:mm:ss} [%t] %p (%F:%L) - %m%n
